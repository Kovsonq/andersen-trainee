В работе разараба есть следующие этапы:
1. Просмотри и ознакомление с требованиями проекта.
2. Нахождение проблем требующих решения (задач).
3. Разработка решения для поставленный задач.
Последние 2 этапа выполняются по кругу для получения наилучшего результата. Именно здесь тратится наибольшее кол-во
времени. Здесь часто встречаются однотипные задачи, которые и могут быть решени при помощи паттернов.

Pattern - некая задача появляется снова и снова, после чего находится некое ядро, которое состовляет решение данной
проблемы. Каждйы паттерн описывает одну проблему. Поэтому многие проблемы уходят, когда ты знаешь какой паттерн
проектирования применить в данный момент. Это не дизайн всего прилажения - это решение какой-то проблемы.

Каждый паттерн состоит из 4 элементов:
1. Название.
2. Проблема, которую он решает.
3. Решение проблемы.
4. Последствия.

Доастоинства разработки по паттернам
- продвинутый дизайн и архитектура с чистым кодом
- коммуникация в команде, все знают концепции, которые могут быть применены

Имя:
- название описывает проблему
- повышает абстракцию разработки
- создает общую базу наименование, которую другие понимают

Проблема:
- когда паттерн может быть применен
- в каком контексте
- может быть включен (в текущую архитектуру проекта)

Решение:
- определяет элементы, как часть дизайна (отношение, ответственность, взаимодейсвия)
- в общем абстрактные определения (множ использование, для разных языков)

Последствия:
- компромисы
- лучший ли паттерн выбран
- цена и преимущества
- какой язык лучше подходит для реализации

------------------------------------------------------------------------------------------------------------------------
                                                    PATTERNS
         CREATIONAL                                      STRUCTURAL                                         BEHAVIORAL
class    Factory method                                  Adaptor                                            Interpreter
                                                                                                            Template Method

object   Abstract factory                                Adaptor                                            Chain of Responsability
         Builder                                        Bridge                                              Command
         Prototype                                      Composite                                           Iterator
         Singletone                                     Decorator                                           Mediator
                                                        Facade                                              Memento
                                                        Flyweight                                           Observer
                                                        Proxy                                               State
                                                                                                            Strategy
-----------------------------------------------------------------------------------------------------------------------
